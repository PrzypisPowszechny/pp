version: '3.5'

services:
  web:
    depends_on:
      - postgres
      - redis
    image: pp/python-venv
    ports:
      - "8000:8000"
    volumes:
      - .:/code
      - ./docker-env:/opt/venv
    env_file:
      - ./dev.env
    environment:
      - MAILGUN_API_KEY={$MAILGUN_API_KEY}
    command: python manage.py runserver 0.0.0.0:8000

    # Alternative gunicorn configuration - failing to reload properly, but useful to simulate prod environment
    #
    # The access-logfile and error-logfile settings to make sure gunicorn does not silence any of them
    #command: gunicorn
    #  --reload
    #  --bind=0.0.0.0:8000
    #  --log-level=info
    #  --access-logfile=-
    #  --error-logfile=-
    #  --config=python:wsgi
    #  wsgi

  worker:
    depends_on:
      - postgres
      - redis
      - web
    image: pp/python-venv
    volumes:
      - .:/code
      - ./docker-env:/opt/venv
    env_file:
      - ./dev.env
    command: celery worker --app=worker.celery_app --loglevel=info --concurrency=2

  worker_beat:
    depends_on:
      - postgres
      - redis
      - web
    image: pp/python-venv
    volumes:
      - .:/code
      - ./docker-env:/opt/venv
    env_file:
      - ./dev.env
    command: celery beat --app=worker.celery_app --loglevel=info

  redis:
    image: "redis:alpine"
    volumes:
      - ./data/redis:/data

  postgres:
    image: "postgres:10-alpine"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    env_file:
      - ./dev.env