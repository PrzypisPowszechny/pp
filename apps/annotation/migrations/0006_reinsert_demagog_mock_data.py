# -*- coding: utf-8 -*-
# Generated by Django 1.11.12 on 2018-09-18 01:05
from __future__ import unicode_literals

from urllib.parse import urlencode, parse_qsl, urlsplit

from django.conf import settings
from django.db import migrations

ADDITIONAL_INFO = 'ADDITIONAL_INFO'
CLARIFICATION = 'CLARIFICATION'
ERROR = 'ERROR'

TRUE = 'TRUE'
PTRUE = 'PTRUE'
FALSE = 'FALSE'
PFALSE = 'PFALSE'
LIE = 'LIE'
UNKOWN = 'UNKNOWN'

PP_PUBLISHER = 'PP'
DEMAGOG_PUBLISHER = 'DEMAGOG'

annotation_link = 'http://demagog.org.pl/wypowiedzi/andrzej-halicki-w-sygnalach-dnia/'
url = 'https://www.polskieradio.pl/13/53/Artykul/2175283,' \
      'Sygnaly-Dnia-6-sierpnia-2018-roku-rozmowa-z-Andrzejem-Halickim'

# Code copied from apps/annotation/utils
OMITTED_QUERY_VARS = (
    # Universal Tracking Module convention names
    'utm_campaign',
    'utm_medium',
    'utm_term',
    'utm_name',
    'utm_source',
    # General convention for references
    'ref',
)


def standardize_url_id(data):
    """
    Format url in the way that:
      - ignores protocol
      - ignores fragment(anchor)
      - ignores some blacklisted query vars like utm etc
      - set '/' as a path if none given
      - removes '?' if no query string
    """
    if not data:
        return ''
    url_parsed = urlsplit(data)
    query_tuples = parse_qsl(url_parsed.query)
    new_query_tuples = []
    for var_name, val in query_tuples:
        if var_name not in OMITTED_QUERY_VARS:
            new_query_tuples.append((var_name, val))
    return '{netloc}{path}{query}'.format(
        netloc=url_parsed.netloc,
        path=url_parsed.path if url_parsed.path else '/',
        query='?' + urlencode(new_query_tuples) if new_query_tuples else ''
    )


# Actual migration content

def delete_broken_mock_annotation(apps, schema):
    annotation_model = apps.get_model('annotation.Annotation')
    annotation_model.objects.filter(annotation_link=annotation_link, publisher=DEMAGOG_PUBLISHER).delete()


def insert_mock_annotation(apps, schema):
    annotation_model = apps.get_model('annotation.Annotation')
    user_model = apps.get_model(settings.AUTH_USER_MODEL)

    # Save url_id explicitly
    model = annotation_model(
        user=user_model.objects.filter(username=settings.DEMAGOG_USERNAME).first(),
        publisher=DEMAGOG_PUBLISHER,
        publisher_annotation_id=1000000,
        url=url,
        url_id=standardize_url_id(url),
        pp_category=ADDITIONAL_INFO,
        demagog_category=TRUE,
        quote='Jeżeli policjant (to jest ustawa o Policji) dostanie od przełożonego rozkaz, który jest sprzeczny z '
              'prawem, ma obowiązek, nie tylko powinien, ale ma obowiązek odmówić wykonania rozkazu.',
        annotation_link=annotation_link,
        annotation_link_title='demagog.org.pl'
    )
    model.save()


def reinsert_mock_annotation(apps, schema):
    delete_broken_mock_annotation(apps, schema)
    insert_mock_annotation(apps, schema)


class Migration(migrations.Migration):
    dependencies = [
        ('annotation', '0005_annotation_date_publisher_id'),
    ]

    operations = [
        migrations.RunPython(reinsert_mock_annotation, migrations.RunPython.noop)
    ]
